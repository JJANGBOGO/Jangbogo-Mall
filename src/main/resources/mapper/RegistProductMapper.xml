<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
        "http://mybatis.org/dtd/mybatis-3-mapper.dtd">

<mapper namespace="com.jangbogo.mall.dao.RegistProductMapper">

    <!--    판매자 상품코드를 가지고 상품 번호 가져오기-->
    <select id="getProdIdx" parameterType="RegistProductDto" resultType="Integer">
        select IDX as 'prod_idx'
        from product
        where SELER_PROD_CD = #{seler_prod_cd} and SELER_IDX = #{seler_idx};
    </select>
            <!--    상품테이블에 추가하기-->
    <insert id="insertProduct" parameterType="RegistProductDto">
        insert into product
        (SELER_IDX, CATE_IDX, SELER_PROD_CD, UPLOAD_PATH, NAME, CTENT, PRC, DC_STATE_CD, DC_RATE, DSPLY_STATE_CD)
        values
        (#{seler_idx}, #{cate_idx2}, #{seler_prod_cd}, #{upload_path}, #{name}, #{content}, #{prc}, #{dc_state_cd}, #{dc_rate}, #{dsply_state_cd});
        <selectKey resultType="int" keyProperty="prod_idx" order="AFTER">
            SELECT LAST_INSERT_ID() AS idx
        </selectKey>
    </insert>
<!--    상품 테이블 수정하기-->
    <update id="updateProduct" parameterType="RegistProductDto">
        update product
        set
            CATE_IDX = #{cate_idx2},
            SELER_PROD_CD = #{seler_prod_cd},
            UPLOAD_PATH = #{upload_path},
            NAME = #{name},
            CTENT = #{content},
            PRC = #{prc},
            DC_STATE_CD = #{dc_state_cd},
            DC_RATE = #{dc_rate},
            DSPLY_STATE_CD = #{dsply_state_cd}
        where IDX = #{prod_idx}
    </update>
            <!--    상품상세테이블에 추가하기-->
    <insert id="insertProductDetail" parameterType="RegistProductDto">
        insert into prod_dtl
        (PROD_IDX, ORPLC, SLE_UNIT, WEIGHT, MFT_TM, DISTB_TLMT, WARN, MAX_SLE_QUTY, SFKP_TP_STATE_CD, SLE_START_TM, SLE_END_TM, INV_QUTY, GUID)
        values
        (#{prod_idx}, #{orplc}, #{sle_unit}, #{weight}, #{mft_tm}, #{distb_tlmt}, #{warn}, #{max_sle_quty}, #{state}, #{sle_start_tm}, #{sle_end_tm}, #{inv_quty}, #{guid});
    </insert>
<!--    상품상세테이블 수정하기-->
    <update id="updateProductDetail" parameterType="RegistProductDto">
        update prod_dtl
        set
        ORPLC = #{orplc},
        SLE_UNIT = #{sle_unit},
        WEIGHT = #{weight},
        MFT_TM = #{mft_tm}
        DISTB_TLMT = #{distb_tlmt}
        WARN = #{warn},
        MAX_SLE_QUTY = #{max_sle_quty},
        SFKP_TP_STATE_CD = #{state},
        SLE_START_TM = #{sle_start_tm},
        SLE_END_TM = #{sle_end_tm},
        INV_QUTY = #{inv_quty},
        GUID = #{guid}
        where prod_idx = #{prod_idx};
    </update>

            <!--    상품상세첨부파일에 추가하기-->
    <insert id="insertProductFile" parameterType="RegistProductDto">
        insert into prod_file
        (UUID, PROD_IDX, NAME, UPLOAD_PATH, TYPE, SORT_ODR)
        values
        (#{UUID}, #{prod_idx}, #{name}, #{UPLOAD_PATH}, #{TYPE}, #{SORT_ODR});
    </insert>
<!--    상품상세첨부파일테이블 수정하기-->
    <update id="updateProductFile" parameterType="RegistProductDto">
        update prod_file
        set
        UUID = #{UUID},
        NAME = #{name},
        UPLOAD_PATH = #{UPLOAD_PATH},
        TYPE = #{TYPE},
        STATE_CD = #{STATE_CD},
        SORT_ODR = #{SORT_ODR}
        where prod_idx = #{prod_idx}
    </update>

    <update id="deleteProduct" parameterType="RegistProductDto">
        update prod_dlt
        set STATE_CD = 2
        where prod_idx = #{prod_idx}
    </update>

<!--    기존 상품들 중 판매자상품코드가 겹치는 것이 있는지 확인-->
    <select id="checkSellerProdCd" parameterType="RegistProductDto" resultType="Integer">
        select count(*)
        from product
        <![CDATA[where SELER_PROD_CD = #{seler_prod_cd} and SELER_IDX = #{seler_idx} and SELER_PROD_CD < 2147483648]]>;
    </select>

<!--    상품등록 시작날짜가 마감날짜보다 먼저 있는지 확인, integer 범위 안에 있는 숫자인지 확인 -->
    <select id="checkSelDate" parameterType="RegistProductDto">
        select prod_idx, SLE_START_TM, SLE_END_TM
        from prod_dtl
        <![CDATA[where #{sle_start_tm} < #{sle_end_tm} and prod_idx = #{prod_idx}]]>;
    </select>

    <select id="getProductList" resultType="RegistProductDto">
        select p.SELER_PROD_CD as 'seler_prod_cd',
               p.UPLOAD_PATH as 'upload_path',
               p.NAME as 'name',
               p.CTENT as 'content',
               p.PRC as 'prc',
               p.DSPLY_STATE_CD as 'dsply_state_cd',
               p.ASCR as 'ascr',
               pd.REG_STATE_CD as 'reg_state_cd',
               pd.PROD_IDX as 'prod_idx'
        from product as p inner join  prod_dtl pd
        on p.idx = pd.prod_idx and p.seler_idx = #{seler_idx}
    </select>

    <select id="selectProdInfo" parameterType="Integer" resultType="RegistProductDto">
        select
            p.SELER_PROD_CD as 'seler_prod_cd',
            p.CATE_IDX as 'cate_idx2',
            p.name as 'name',
            p.ctent as 'content',
            p.prc as 'prc',
            p.DC_STATE_CD as 'dc_state_cd',
            p.DC_RATE as 'dc_rate',
            p.DSPLY_STATE_CD as 'dsply_state_cd',
            pd.ORPLC as 'orplc',
            pd.SLE_UNIT as 'sle_unit',
            pd.WEIGHT as 'weight',
            pd.MFT_TM  as 'mft_tm',
            pd.DISTB_TLMT as 'distb_tlmt',
            pd.SLE_START_TM as 'sle_start_tm',
            pd.SLE_END_TM as 'sle_end_tm',
            pd.SFKP_TP_STATE_CD as 'state',
            pd.MAX_SLE_QUTY as 'max_sle_quty',
            pd.INV_QUTY as 'inv_quty',
            pd.WARN as 'warn',
            pd.GUID as 'guid'
        from product as p inner join  prod_dtl pd
        on p.idx = pd.prod_idx and pd.prod_idx = #{prod_idx};
    </select>
</mapper>

